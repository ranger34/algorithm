Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

// top to down
class Solution {
public:
    int depth(TreeNode* root){
        if(root == NULL)
            return 0;
        else
            return max(depth(root->left), depth(root->right)) + 1;
    }
    bool isBalanced(TreeNode* root) {
        if(root == NULL) return true;
        int ld = depth(root->left);
        int rd = depth(root->right);
        if(abs(ld-rd) > 1)
            return false;
        else
            return isBalanced(root->left) && isBalanced(root->right);
    }
};

// bottom up
class Solution {
public:
    //if not balance ,return -1; else return the depth
    int balanceness(TreeNode* root){
        if(root == NULL) return 0;
        int ld = balanceness(root->left);
        if(ld == -1) return -1;
        int rd = balanceness(root->right);
        if(rd == -1) return -1;
        if(abs(ld - rd) > 1) return -1;
        return max(ld, rd) + 1;
    }
    bool isBalanced(TreeNode* root) {
        return balanceness(root) != -1;
    }
};