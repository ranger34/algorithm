Given an array of size n, find the majority element. The majority element is the element that appears more than ? n/2 ? times.

You may assume that the array is non-empty and the majority element always exist in the array.


// sort then count
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = 1;
        if(nums.size() == 1) return nums[0];
        sort(nums.begin(),nums.end());
        for(int i = 1; i < nums.size(); i++)
            if(nums[i - 1] == nums[i])
            {   
                n++;
                if(n > nums.size()/2) return nums[i];
            }
    }
};

// use hash map
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int, int> count;
        for(int i = 0; i < nums.size(); i++)
        {
            if(++count[nums[i]] > nums.size()/2)
                return nums[i];
        }
    }
};

//6 Suggested Solutions in C++ with Explanations:
//https://leetcode.com/discuss/42929/6-suggested-solutions-in-c-with-explanations