Implement the following operations of a queue using stacks.

    push(x) -- Push element x to the back of queue.
    pop() -- Removes the element from in front of queue.
    peek() -- Get the front element.
    empty() -- Return whether the queue is empty.

Notes:

    You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
    Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
    You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).


class Queue {
    stack<int> stack1, stack2;
public:
    // Push element x to the back of queue.
    void push(int x) {
        stack1.push(x);
    }

    // Removes the element from in front of queue.
    void pop(void) {
        int n;
        while(!stack1.empty())
        {
            n = stack1.top();
            stack1.pop();
            stack2.push(n);
        }
        stack2.pop();
        while(!stack2.empty())
        {
            n = stack2.top();
            stack2.pop();
            stack1.push(n);
        }
    }

    // Get the front element.
    int peek(void) {
        int m,n;
        while(!stack1.empty())
        {
            n = stack1.top();
            stack1.pop();
            stack2.push(n);
        }
        m = stack2.top();
        while(!stack2.empty())
        {
            n = stack2.top();
            stack2.pop();
            stack1.push(n);
        }
        return m;
    }

    // Return whether the queue is empty.
    bool empty(void) {
        return stack1.empty() && stack2.empty();
    }
};