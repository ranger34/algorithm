Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if(!root) return {};
        
        vector<vector<int>> result;
        vector<int> row;
        queue<TreeNode*> q;
        q.push(root);
        int count = 1;
        
        while(!q.empty())
        {
            if(q.front()->left != NULL) q.push(q.front()->left);
            if(q.front()->right != NULL) q.push(q.front()->right);
            row.push_back(q.front()->val);
            q.pop();
            count--;
            if(count == 0)
            {
                result.insert(result.begin(), row);
                row.clear();
                count = q.size();
            }
        }
        
        return result;
    }
};